//
//  EMUIKit.swift
//  
//
//  Created by Emiaostein on 15/2/23.
//  Copyright (c) 2015 Botai Company. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

public class EMUIKit : NSObject {

    //// Cache

    private struct Cache {
        static var gradientColor: UIColor = UIColor(red: 0.396, green: 0.543, blue: 1.000, alpha: 1.000)
        static var gradientColor2: UIColor = UIColor(red: 1.000, green: 0.751, blue: 0.751, alpha: 1.000)
        static var gradient: CGGradient = CGGradientCreateWithColors(CGColorSpaceCreateDeviceRGB(), [EMUIKit.gradientColor.CGColor, EMUIKit.gradientColor2.CGColor], [0, 1])
        static var imageOfCanvas1: UIImage?
        static var canvas1Targets: [AnyObject]?
        static var imageOfCanvas2: UIImage?
        static var canvas2Targets: [AnyObject]?
    }

    //// Colors

    public class var gradientColor: UIColor { return Cache.gradientColor }
    public class var gradientColor2: UIColor { return Cache.gradientColor2 }

    //// Gradients

    public class var gradient: CGGradient { return Cache.gradient }

    //// Drawing Methods

    public class func drawEM_Star(#frame: CGRect, color: UIColor) {

        //// Star Drawing
        var starPath = UIBezierPath()
        starPath.moveToPoint(CGPointMake(frame.minX + 0.50000 * frame.width, frame.minY + 0.00000 * frame.height))
        starPath.addLineToPoint(CGPointMake(frame.minX + 0.67634 * frame.width, frame.minY + 0.25729 * frame.height))
        starPath.addLineToPoint(CGPointMake(frame.minX + 0.97553 * frame.width, frame.minY + 0.34549 * frame.height))
        starPath.addLineToPoint(CGPointMake(frame.minX + 0.78532 * frame.width, frame.minY + 0.59271 * frame.height))
        starPath.addLineToPoint(CGPointMake(frame.minX + 0.79389 * frame.width, frame.minY + 0.90451 * frame.height))
        starPath.addLineToPoint(CGPointMake(frame.minX + 0.50000 * frame.width, frame.minY + 0.80000 * frame.height))
        starPath.addLineToPoint(CGPointMake(frame.minX + 0.20611 * frame.width, frame.minY + 0.90451 * frame.height))
        starPath.addLineToPoint(CGPointMake(frame.minX + 0.21468 * frame.width, frame.minY + 0.59271 * frame.height))
        starPath.addLineToPoint(CGPointMake(frame.minX + 0.02447 * frame.width, frame.minY + 0.34549 * frame.height))
        starPath.addLineToPoint(CGPointMake(frame.minX + 0.32366 * frame.width, frame.minY + 0.25729 * frame.height))
        starPath.closePath()
        color.setFill()
        starPath.fill()
    }

    public class func drawCanvas1() {

        //// Oval Drawing
        var ovalPath = UIBezierPath(ovalInRect: CGRectMake(0, 0, 200, 200))
        UIColor.grayColor().setFill()
        ovalPath.fill()
    }

    public class func drawCanvas2() {

        //// Star Drawing
        var starPath = UIBezierPath()
        starPath.moveToPoint(CGPointMake(100, 0))
        starPath.addLineToPoint(CGPointMake(135.27, 51.46))
        starPath.addLineToPoint(CGPointMake(195.11, 69.1))
        starPath.addLineToPoint(CGPointMake(157.06, 118.54))
        starPath.addLineToPoint(CGPointMake(158.78, 180.9))
        starPath.addLineToPoint(CGPointMake(100, 160))
        starPath.addLineToPoint(CGPointMake(41.22, 180.9))
        starPath.addLineToPoint(CGPointMake(42.94, 118.54))
        starPath.addLineToPoint(CGPointMake(4.89, 69.1))
        starPath.addLineToPoint(CGPointMake(64.73, 51.46))
        starPath.closePath()
        UIColor.grayColor().setFill()
        starPath.fill()
    }

    //// Generated Images

    public class func imageOfEM_Star(#frame: CGRect, color: UIColor) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            EMUIKit.drawEM_Star(frame: frame, color: color)

        let imageOfEM_Star = UIGraphicsGetImageFromCurrentImageContext()!.imageWithRenderingMode(UIImageRenderingMode.AlwaysTemplate)
        UIGraphicsEndImageContext()

        return imageOfEM_Star
    }

    public class var imageOfCanvas1: UIImage {
        if Cache.imageOfCanvas1 != nil {
            return Cache.imageOfCanvas1!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(200, 200), false, 0)
            EMUIKit.drawCanvas1()

        Cache.imageOfCanvas1 = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfCanvas1!
    }

    public class var imageOfCanvas2: UIImage {
        if Cache.imageOfCanvas2 != nil {
            return Cache.imageOfCanvas2!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(200, 200), false, 0)
            EMUIKit.drawCanvas2()

        Cache.imageOfCanvas2 = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfCanvas2!
    }

    //// Customization Infrastructure

    @IBOutlet var canvas1Targets: [AnyObject]! {
        get { return Cache.canvas1Targets }
        set {
            Cache.canvas1Targets = newValue
            for target: AnyObject in newValue {
                target.setImage(EMUIKit.imageOfCanvas1)
            }
        }
    }

    @IBOutlet var canvas2Targets: [AnyObject]! {
        get { return Cache.canvas2Targets }
        set {
            Cache.canvas2Targets = newValue
            for target: AnyObject in newValue {
                target.setImage(EMUIKit.imageOfCanvas2)
            }
        }
    }

}

@objc protocol StyleKitSettableImage {
    func setImage(image: UIImage!)
}

@objc protocol StyleKitSettableSelectedImage {
    func setSelectedImage(image: UIImage!)
}
